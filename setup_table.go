package dynamotest

import (
	"context"
	"crypto/rand"
	"encoding/binary"
	"fmt"
	"testing"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

/* CreateTestingTable creates a table with the given schema and initial data and returns the table name
**
** tablePrefix is the prefix of the table name, we need this just in case we want to create multiple tables
** with the same schema and different data, so we can differentiate between them,
** and also, to check what happened to the table if not purged
**
** schema is the schema of the table except the table name which is generated by the function using the tablePrefix and the billing mode is set to PayPerRequest
**
** initialData is a type alias for any type of data that can be used to populate the table
**/
func (c Client) CreateTestingTable(t *testing.T, tablePrefix string, schema dynamodb.CreateTableInput, initialData ...any) string {
	t.Helper()
	randomBytes := make([]byte, 8)
	_, err := rand.Read(randomBytes)
	if err != nil {
		t.Fatalf("Could not generate random suffix for  table name: %v", err)
	}
	//randomBytes to suffix
	suffix := binary.BigEndian.Uint32(randomBytes)
	// Generate a random table name
	table := fmt.Sprintf("%s-%d", tablePrefix, suffix)

	putItems := make([]*types.PutRequest, 0, len(initialData))
	for _, itemData := range initialData {
		item, err := attributevalue.MarshalMap(itemData)
		if err != nil {
			panic("failed to marshall initial data" + err.Error())
		}

		putItems = append(putItems, &types.PutRequest{
			Item: item,
		})
	}

	// Set the table name to the generated table name
	schema.TableName = aws.String(table)
	schema.BillingMode = types.BillingModePayPerRequest

	// Add extra retry setup in case Docker instance is busy. This can happen
	// especially within a CI environment, and the default retry count of 3
	// times is too fragile.
	opt := func(o *dynamodb.Options) { o.RetryMaxAttempts = 10 }

	_, err = c.Client.CreateTable(context.Background(), &schema, opt)
	if err != nil {
		t.Fatalf("Could not create table '%s': %v", table, err)
	}

	if len(putItems) > 0 {
		puts := make([]types.WriteRequest, 0, len(putItems))
		for _, d := range putItems {
			puts = append(puts, types.WriteRequest{PutRequest: d})
		}
		_, err = c.Client.BatchWriteItem(context.Background(), &dynamodb.BatchWriteItemInput{
			RequestItems: map[string][]types.WriteRequest{
				table: puts,
			},
		})
		if err != nil {
			t.Fatalf("Could not write data to table '%s': %v", table, err)
		}
	}

	t.Logf("Table '%s' has been created", table)

	return table
}
